---
title: "final_project"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(here)
library(tmap)
library(nngeo)
library(terra)
library(tidyverse)
library(dynlm)
library(spdep)
```

```{r, Read in Data}
rm(list = ls())

# Creeks
channel_islands_creeks <- st_read(here("data", "NHD_H_18060014_HU8_Shape", "Shape", "NHDFlowline.shp"))
creeks <- st_read(here("data", "NHD_H_18060013_HU8_Shape", "Shape", "NHDFlowline.shp"))

# Elevation Rasters
tif1 <- rast(here("data", "USGS_1_n35w121_20210301.tif"))
tif4 <- rast(here("data", "USGS_1_n34w120_20130911.tif"))
tif3 <- rast(here("data", "USGS_1_n34w121_20130911.tif"))
tif2 <- rast(here("data", "USGS_1_n35w120_20240207.tif"))

# Merge rasters into one tile
elevation_raster <- merge(tif1, tif2, tif3, tif4)
# Set elevation < 1 to NA
elevation_raster[elevation_raster < 1] <- NA
```

```{r, Cropping Rasters}
# Creating extents
channel_islands_extent <- ext(-120.51, -119.28, 33.86, 34.15)
santa_barbara_extent <- ext(-120.14, -119.37, 34.31, 34.57)
point_conception_extent <- ext(-120.525807, -120.338867, 34.43, 34.521897)
large_extent <- ext(-120.93, -118.89, 33.79, 35.05)

# Cropping rasters using extents
channel_islands_map_rast <- terra::crop(elevation_raster, channel_islands_extent)
santa_barbara_map_rast <- terra::crop(elevation_raster, santa_barbara_extent)
point_conception_map_rast <- terra::crop(elevation_raster, point_conception_extent)
large_extent_rast <- terra::crop(elevation_raster, large_extent)
```

```{r, Archaeological Site Locations, Point Conception}
early_sites <- data.frame(
  lon = c(-120.478075, -120.464917, -120.472431, -120.423728),
  lat = c(34.482333, 34.468369, 34.459728, 34.457061),
  age = c("Early Holocene", "Early Holocene", "Early Holocene", "Early Holocene")
)

middle_sites <- data.frame(
  lon = c(-120.484033, -120.462561, -120.456017, -120.439172, -120.417517, -120.467314,
          -120.465567),
  lat = c(34.486821, 34.479497, 34.461642, 34.454397, 34.453544, 34.4493, 34.4497),
  age = c("Middle Holocene", "Middle Holocene", "Middle Holocene", "Middle Holocene", "Middle Holocene", "Middle Holocene", "Middle Holocene")
)

late_sites <- data.frame(
  lon = c(-120.484061, -120.472714, -120.471825, -120.446807, -120.443714, -120.470214, -120.468167, -120.470469, -120.470764, -120.470353, -120.4673, -120.464614, -120.463492, -120.462292),
  lat = c(34.484853, 34.460742, 34.454228, 34.45, 34.451767, 34.449558, 34.4503, 34.452011, 34.452331, 34.452164, 34.451886, 34.45115, 34.449714, 34.448922),
  age = c("Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene", "Late Holocene")
)

early_sites <- st_as_sf(early_sites, coords = c("lon", "lat"), crs = st_crs(4326))
middle_sites <- st_as_sf(middle_sites, coords = c("lon", "lat"), crs = st_crs(4326))
late_sites <- st_as_sf(late_sites, coords = c("lon", "lat"), crs = st_crs(4326))

early_sites <- st_transform(early_sites, st_crs(4269))
middle_sites <- st_transform(middle_sites, st_crs(4269))
late_sites <- st_transform(late_sites, st_crs(4269))

all_sites <- rbind(early_sites, middle_sites, late_sites)

all_sites$presence <- 1
```

```{r, Finding Site Elevations}
points_vect <- vect(all_sites)

extracted <- terra::extract(elevation_raster, points_vect)

all_sites$elevation_m <- extracted$USGS_1_n35w121_20210301
```

```{r, Finding Site Distance to Water}
creeks_nozm <- st_zm(creeks, drop = TRUE, what = "ZM")

dist2creek <- function(site, creeks) {
  nngeo::st_nn(site, 
               creeks,
               k = 1, 
               returnDist = TRUE, 
               progress = FALSE)$dist[[1]]
}

all_sites$water_proximity <- as.numeric(nngeo::st_nn(all_sites, 
                                                     creeks_nozm, 
                                                     k = 1, 
                                                     returnDist = TRUE)$dist)
sites_actual <- all_sites
```


```{r}
tm_shape(point_conception_map_rast) +
  tm_raster(title = 'Elevation (m)') +
tm_shape(creeks) +
  tm_lines(col = "blue",
           lwd = 0.4) +
tm_shape(early_sites) +
  tm_dots(shape = 21,
          col = "blue",
          size = 0.2) +
tm_shape(middle_sites) +
  tm_dots(shape = 21,
          col = "green",
          size = 0.2) +
tm_shape(late_sites) +
  tm_dots(shape = 21,
          col = "yellow",
          size = 0.2) +
tm_layout()
```

```{r, Absence Points, Point Conception}
set.seed(420)
absence_points <- spatSample(point_conception_map_rast, size = 2000, method = "regular", as.points = TRUE)

extracted_absence_sb <- terra::extract(elevation_raster, absence_points)

absence_points$elevation_m <- extracted_absence_sb$USGS_1_n35w121_20210301

absence_points$presence <- 0
absence_points$age <- NA

absence_points <- st_as_sf(absence_points)

absence_points <- subset(absence_points, elevation_m >= 1) %>%
  select(-USGS_1_n35w121_20210301)

absence_points$water_proximity <- as.numeric(nngeo::st_nn(absence_points, 
                                                     creeks_nozm, 
                                                     k = 1, 
                                                     returnDist = TRUE)$dist)

all_sites <- rbind(all_sites, absence_points)

all_sites$presence <- as.integer(all_sites$presence)

```

```{r}
logit_model <- glm(presence ~ water_proximity + elevation_m, data = all_sites, family = binomial)
summary(logit_model)

all_sites$predicted_prob <- predict(logit_model, type = "response")
```

```{r}
ggplot(all_sites, aes(x = elevation_m, y = predicted_prob, color = presence, group = presence)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
  labs(x = "Elevation (m)", y = "Predicted Probability", title = "Predicted Probabilities by Elevation and Water Proximity") +
  theme_minimal()

```

```{r}
# Fit logistic regression model
logit_mod <- glm(presence ~ elevation_m + sqrt(water_proximity), 
                 data = all_sites, 
                 family = binomial)

# Extract the residuals
all_sites$residual <- resid(logit_mod)

# Create the spatial weights matrix
all_sites_sf <- st_as_sf(all_sites, coords = c("longitude", "latitude"), crs = 4326)
all_sites_nb <- dnearneigh(all_sites_sf, d1 = 0, d2 = 50)
all_sites_lw <- nb2listw(all_sites_nb, style = "W")

# Create a spatial lag of the independent variable
lag_elevation <- lag.listw(all_sites_lw, all_sites$elevation_m)

# Fit logistic regression model with the spatially lagged variable
logit_mod_spatial <- glm(presence ~ elevation_m + sqrt(water_proximity) + lag_elevation, 
                         data = all_sites, 
                         family = binomial)

# Model summary
summary(logit_mod_spatial)

```

```{r}
all_sites$predicted_prob <- predict(logit_mod_spatial, type = "response")

ggplot(all_sites, aes(x = elevation_m, 
                      y = predicted_prob)) +
  geom_point(alpha = 0.5, 
             color = "blue") + 
  geom_smooth(method = "glm", 
              method.args = 
                list(family = "binomial"), 
              se = FALSE, 
              color = "red") +
  labs(x = "Elevation (m)", 
       y = "Predicted Probability of Presence", 
       title = "Predicted Probability of Site Presence by Elevation") +
  theme_minimal()

```

```{r}
all_sites_sf <- st_as_sf(all_sites, coords = c("longitude", "latitude"), crs = 4326)

ggplot(all_sites_sf) +
  geom_sf(aes(color = predicted_prob), 
          size = 4,
          shape = 15) +
  scale_color_viridis_c(option = "C", 
                        name = "Predicted Probability") +
  labs(title = "Spatial Distribution of Predicted Probabilities of Presence",
       subtitle = "Based on Elevation and Water Proximity") +
  theme_minimal()

```

```{r}
tm_shape(point_conception_map_rast) +
  tm_raster(palette = 'Greys',
            legend.show = FALSE) +
tm_shape(creeks) +
  tm_lines(col = 'royalblue') +
tm_shape(all_sites_sf) +
  tm_dots(col = 'predicted_prob',
          palette = 'Spectral',
          size = 1.6,
          shape = 15,
          alpha = 0.5) +
tm_shape(sites_actual) +
  tm_dots(size = 0.1)
```

---

# Applying the model to SB

```{r, Generating Points for Hypothetical Sites in Santa Barbara Area}
set.seed(420)
hypo_sites <- spatSample(santa_barbara_map_rast, size = 20000, method = "regular", as.points = TRUE)
```

```{r, Extracting Elevations for Hypothetical Sites}
hypo_sites <- st_as_sf(hypo_sites)

hypo_points <- vect(hypo_sites)

extracted <- terra::extract(elevation_raster, hypo_points)

hypo_sites$elevation_m <- extracted$USGS_1_n35w121_20210301

hypo_sites <- hypo_sites %>%
  filter(elevation_m >= 1)
```

```{r, Calculating Distance to Creeks for Hypothetical Sites}
hypo_sites$water_proximity <- as.numeric(nngeo::st_nn(hypo_sites, 
                                                     creeks_nozm, 
                                                     k = 1, 
                                                     returnDist = TRUE)$dist)
```

```{r, Arranging Hypothetical Sites Dataframe}
hypo_sites$presence <- 0
hypo_sites$age <- NA

hypo_sites <- st_as_sf(hypo_sites)

hypo_sites <- hypo_sites %>%
  filter(elevation_m >= 1) %>%
  select(-USGS_1_n35w121_20210301) %>%
  filter(water_proximity <= 2000)
```

```{r, Presence and Presence Threshold for Hypothetical Sites}
hypo_sites$presence <- as.integer(hypo_sites$presence)

hypo_sites$presence <- ifelse(hypo_sites$elevation_m >= 35 & hypo_sites$elevation_m <= 45, 1, 0)
```

```{r, Logit Model for Hypothetical Sites}
logit_mod <- glm(presence ~ elevation_m + sqrt(water_proximity), 
                 data = hypo_sites, 
                 family = binomial)

hypo_sites$residual <- resid(logit_mod)

hypo_sites_sf <- st_as_sf(hypo_sites, coords = c("longitude", "latitude"), crs = 4326)
hypo_sites_nb <- dnearneigh(hypo_sites_sf, d1 = 0, d2 = 50)
hypo_sites_lw <- nb2listw(hypo_sites_nb, style = "W")

lag_elevation <- lag.listw(hypo_sites_lw, hypo_sites$elevation_m)

logit_mod_spatial <- glm(presence ~ elevation_m + sqrt(water_proximity) + lag_elevation, 
                         data = hypo_sites, 
                         family = binomial)

summary(logit_mod_spatial)

hypo_sites$predicted_prob <- predict(logit_mod_spatial, type = "response")
```

```{r, Hypothetical Sites Presence ~ Elevation}
ggplot(hypo_sites, aes(x = elevation_m, y = predicted_prob)) +
  geom_point(alpha = 0.5, color = "royalblue") + 
  geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, color = "darkred") +
  labs(x = "Elevation (m)", 
       y = "Predicted Probability of Presence", 
       title = "Predicted Probability of Site Presence by Elevation") +
  theme_minimal()
```

```{r, Plotting Hypothetical Site Probability}
hypo_sites_sf <- st_as_sf(hypo_sites, coords = c("longitude", "latitude"), crs = 4326)

ggplot(hypo_sites_sf) +
  geom_sf(aes(color = predicted_prob), size = 1) +
  scale_color_viridis_c(option = "C", name = "Predicted Probability") +
  labs(title = "Probability of Site Presence",
       subtitle = "Based on Elevation and Water Proximity") +
  theme_linedraw()
```

```{r, Mapping Probability of Hypothetical Site Presence}
tm_shape(santa_barbara_map_rast) +
  tm_raster(palette = 'Greys',
            legend.show = FALSE) +
tm_shape(hypo_sites_sf) +
  tm_dots(col = 'predicted_prob',
          palette = 'Spectral',
          size = 0.2,
          shape = 15,
          title = 'Site Presence Probability') +
tm_layout(legend.outside = TRUE)
```






